@use 'sass:map';

$breakpoints: (
  m: 480px,
  t: 768px,
  d: 1280px,
);

// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint-from($name) {
  $min: get-breakpoint-value($name);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Makes the @content apply to the given breakpoint and narrower.
@mixin breakpoint-to($name) {
  $max: get-breakpoint-value($name) - 1;

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Makes the @content apply to the between the given breakpoints
@mixin breakpoint-between($minName, $maxName) {
  $min: get-breakpoint-value($minName);
  $max: get-breakpoint-value($maxName) - 1;

  @if $min {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else {
    @media (max-width: $max) {
      @content;
    }
  }
}

// Value of the given breakpoint name
@function get-breakpoint-value($name) {
  $min: map.get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

/**
 * Applies a linear gradient background to an element
 *
 * @param {String} $direction - The direction of the gradient
 * @param {Number} $coverage - The percentage of the element to be covered by the gradient
 */
@mixin gradient-overlay($direction: 'bottom-top', $coverage: '100') {
  position: relative;

  &::after {
    $deg: 0deg;

    position: absolute;
    pointer-events: none;
    content: '';

    @if $direction == 'top-bottom' {
      $deg: 180deg;

      top: 0;
    } @else if $direction == 'left-right' {
      $deg: 90deg;

      left: 0;
    } @else if $direction == 'right-left' {
      $deg: 270deg;

      right: 0;
    } @else {
      bottom: 0;
    }

    @if $direction == 'top-bottom' or $direction == 'bottom-top' {
      left: 0;
      width: 100%;
      height: #{$coverage} + '%';
    } @else {
      top: 0;
      width: #{$coverage} + '%';
      height: 100%;
    }

    background: linear-gradient($deg, #000 0%, rgb(0 0 0 / 0%) 100%);
  }
}
